import mongoose, { InferSchemaType, model, Schema } from "mongoose";
import { FieldsType } from "@/types/types";
import { regexString, regexNumber } from "@/utils/regex";

export const fields: FieldsType = {
  parent: {
    type: mongoose.Schema.Types.ObjectId,
    fk: true,
    parent: "users",
    parentUnset: ["password"],
    fkGet: true,
    search: false,
    select: true,
    required: true,
    unique: false,
    minLength: 24,
    maxLength: 24,
    regex: regexString,
    isHashed: false,
    isImage: false,
    isFile: false,
  },
  invoiceName: {
    type: String,
    fk: false,
    parent: "",
    parentUnset: [],
    fkGet: false,
    search: true,
    select: true,
    required: true,
    unique: false,
    minLength: 3,
    maxLength: 255,
    regex: regexString,
    isHashed: false,
    isImage: false,
    isFile: false,
  },
  invoiceNumber: {
    type: String,
    fk: false,
    parent: "",
    parentUnset: [],
    fkGet: false,
    search: true,
    select: true,
    required: true,
    unique: true,
    minLength: 13,
    maxLength: 20,
    regex: regexString,
    isHashed: false,
    isImage: false,
    isFile: false,
  },
  invoiceDueDate: {
    type: String,
    fk: false,
    parent: "",
    parentUnset: [],
    fkGet: false,
    search: true,
    select: true,
    required: true,
    unique: false,
    minLength: 12,
    maxLength: 15,
    regex: regexNumber,
    isHashed: false,
    isImage: false,
    isFile: false,
  },
  invoiceAmount: {
    type: Number,
    fk: false,
    parent: "",
    parentUnset: [],
    fkGet: false,
    search: false,
    select: true,
    required: true,
    unique: false,
    minLength: 6,
    maxLength: 20,
    regex: regexNumber,
    isHashed: false,
    isImage: false,
    isFile: false,
  },
  invoiceStatus: {
    type: String,
    fk: false,
    parent: "",
    parentUnset: [],
    fkGet: false,
    search: true,
    select: true,
    required: true,
    unique: false,
    minLength: 4,
    maxLength: 7,
    regex: regexString,
    isHashed: false,
    isImage: false,
    isFile: false,
  },
};

export const userSchema = new Schema(fields, { timestamps: true });
userSchema.virtual("user_info", {
  ref: "User",
  localField: "parent",
  foreignField: "_id",
  justOne: true,
});

export const invoiceSchema = new Schema(fields, { timestamps: true });
type Invoice = InferSchemaType<typeof invoiceSchema>;
export default model<Invoice>("Invoice", invoiceSchema);
